Lab 2: Understanding and implementing Midpoint circle and ellipse generation algorithm
1. Program for  Midpoint circle generation
#include<dos.h>
#include<stdio.h>
#include<conio.h>
#include<graphics.h>
void draw_circle(int,int,int);
void symmetry(int,int,int,int);
int main()
{
        int xc,yc,R;
        int gd=DETECT,gm;
        initgraph(&gd,&gm,"C:\\TurboC3\\BGI"); 
        printf("Enter the center of the circle:\n");
        printf("Xc =");
        scanf("%d",&xc);
        printf("Yc =");
        scanf("%d",&yc);
        printf("Enter the radius of the circle :");
        scanf("%d",&R);
        draw_circle(xc,yc,R);
        getch();
        closegraph();
        return 0;
}


void draw_circle(int xc,int yc,int rad)
{
        int x = 0;
        int y = rad;
        int p = 1-rad;
        symmetry(x,y,xc,yc);
        for(x=0;y>x;x++)
         {
         if(p<0)
                 p += 2*x + 3;
         else
                 {
                 p += 2*(x-y) + 5;
                 y--;
                 }
         symmetry(x,y,xc,yc);
         delay(50);
         }
}


void symmetry(int x,int y,int xc,int yc)
{
        putpixel(xc+x,yc-y,GREEN); //For pixel (x,y)
        delay(50);
        putpixel(xc+y,yc-x, GREEN); //For pixel (y,x)
        delay(50);
        putpixel(xc+y,yc+x, GREEN); //For pixel (y,-x)
        delay(50);
        putpixel(xc+x,yc+y, GREEN); //For pixel (x,-y)
        delay(50);
        putpixel(xc-x,yc+y, GREEN); //For pixel (-x,-y)
        delay(50);
        putpixel(xc-y,yc+x, GREEN); //For pixel (-y,-x)
        delay(50);
        putpixel(xc-y,yc-x, GREEN); //For pixel (-y,x)
        delay(50);
        putpixel(xc-x,yc-y, GREEN); //For pixel (-x,y)
        delay(50);
}


// 2.  Midpoint Cricle Drawing Algorithm
# #include<stdio.h>
#include<conio.h>
#include<graphics.h>


void ellipse(int xc,int yc,int rx,int ry)
{
        int gm=DETECT,gd;
           int x, y, p;
           //clrscr();
        initgraph(&gm,&gd,"");
           x=0;
           y=ry;
           p=(ry*ry)-(rx*rx*ry)+((rx*rx)/4);
           while((2*x*ry*ry)<(2*y*rx*rx))
           {
        putpixel(xc+x,yc-y,WHITE);
        putpixel(xc-x,yc+y,WHITE);
        putpixel(xc+x,yc+y,WHITE);
        putpixel(xc-x,yc-y,WHITE);


        if(p<0)
        {
                     x=x+1;
                     p=p+(2*ry*ry*x)+(ry*ry);
        }
        else
        {
                     x=x+1;
                     y=y-1;
                     p=p+(2*ry*ry*x+ry*ry)-(2*rx*rx*y);
        }
           }
           p=((float)x+0.5)*((float)x+0.5)*ry*ry+(y-1)*(y-1)*rx*rx-rx*rx*ry*ry;


    while(y>=0)
           {
        putpixel(xc+x,yc-y,WHITE);
        putpixel(xc-x,yc+y,WHITE);  
        putpixel(xc+x,yc+y,WHITE); 
        putpixel(xc-x,yc-y,WHITE); 


        if(p>0)
        {
                     y=y-1;
                     p=p-(2*rx*rx*y)+(rx*rx);
        }
        else
        {
                     y=y-1;
                     x=x+1;
                     p=p+(2*ry*ry*x)-(2*rx*rx*y)-(rx*rx);
            }
          }        
   getch();
   closegraph();
 }


int main()
{
   int xc,yc,rx,ry;
   //clrscr();
   printf("Enter Xc=");
   scanf("%d",&xc);
   printf("Enter Yc=");
   scanf("%d",&yc);
   printf("Enter Rx=");
   scanf("%d",&rx);
   printf("Enter Ry=");
   scanf("%d",&ry);
   ellipse(xc,yc,rx,ry);
   getch();
   return 0;
}


Lab Work: 
1. WAP to take the center of a circle and its radius and then tabulate the calculation for drawing the plot pixels for the first sector of the circle.
2. WAP to take the center of an ellipse and its major and minor axis. Then tabulate the calculation for drawing the plot pixels of Region 1 of the ellipse.